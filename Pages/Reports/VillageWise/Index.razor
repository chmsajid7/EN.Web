@page "/reports/villageWise/index"
@attribute [Authorize]
@inject PageNumberHelper PageNumberHelper
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Village Wise Reports</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">List of Reports</li>
                    <li class="breadcrumb-item active">UC Wise</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <EditForm Model="@listTaluka" OnValidSubmit="OnValidSubmit">
                    @if (!loading && filteredReports != null)
                    {
                        <a href="" @onclick="@(() => DownloadCsv())" @onclick:preventDefault style="color:#007bff;">
                            <h3 class="card-title">&nbsp;&nbsp;&nbsp;<i class="fas fa-download"></i>&nbsp;Click here to download</h3>
                        </a>
                    }
                    @if (isOnSearch)
                    {
                        <a href="#" style="float: right; margin-top: 0.5%" @onclick:preventDefault @onclick="@(() => ClearSearch())">
                            &nbsp;&nbsp;&nbsp;&nbsp;Clear Search
                        </a>
                    }
                    <a href="#" style="float:right; color:grey; margin-top:0.5%" @onclick:preventDefault @onclick="@(()=> Search(selectedTaluka, selectedUc, selectedVillage))" data-toggle="modal" data-target="#modal-default-search">
                        &nbsp;&nbsp;&nbsp;
                        <i class="fas fa-search"></i>
                    </a>
                    <select class="form-control select3" style="float:right; width: 20%; height:65%" @bind="selectedVillage">
                        <option disabled selected hidden>Select Village ...</option>
                        @foreach (var village in listVillages)
                        {
                            // just for demo
                            <option value="@village.id">@village.talukaName</option>
                        }
                    </select>
                    <select class="form-control select2" style="float:right; width: 20%; height:65%; margin-right:1%" @bind="selectedUc">
                        <option disabled selected hidden>Select Union Council ...</option>
                        @foreach (var uc in listUCs)
                        {
                            // just for demo
                            <option value="@uc.id">@uc.talukaName</option>
                        }
                    </select>
                    <select class="form-control select1" style="float:right; width: 20%; height:65%; margin-right:1%" @bind="selectedTaluka">
                        <option disabled selected hidden>Select Taluka ...</option>
                        @foreach (var taluka in listTaluka)
                        {
                            <option value="@taluka.id">@taluka.talukaName</option>
                        }
                    </select>
                </EditForm>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table text-nowrap">
                    <thead>
                        <tr>
                            <th>Taluka Name</th>
                            <th>Union Council</th>
                            <th>Village</th>
                            <th>Total Entries</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (loading)
                        {
                            <tr>
                                <td colspan="12" class="text-center">
                                    <span class="spinner-border spinner-border-lg align-center"></span>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @if (filteredReports != null)
                            {
                                foreach (var item in filteredReports.villages)
                                {
                                    <tr>
                                        <td>@item.taluka</td>
                                        <td>@item.uc</td>
                                        <td>@item.village</td>
                                        <td>@item.totalPerson</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer clearfix"></div>
        </div>
    </div>
</section>

@code {
    private bool isOnSearch;
    private bool loading;
    private int selectedTalukaId;
    private string selectedTaluka;
    private string selectedUc;
    private string selectedVillage;
    private List<AllTaluka> listTaluka;
    private List<AllUCs> listUCs;
    private List<AllVillages> listVillages;
    private VillageFilteredReports filteredReports;
    private string baseUrl = "https://entrynowapi.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        selectedTalukaId = 0;

        loading = true;
        await GetTalukas();
        await GetUCs();
        await GetVillages();
        await GetUCsData();
        loading = false;
    }

    private async Task GetTalukas()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/get?pageNumber=1&perPage=10"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    listTaluka = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AllTaluka>>(apiResponse);
                }
            }
        }
        catch (Exception e)
        {
            AlertService.Clear();
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GetUCs()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/get?pageNumber=1&perPage=10"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    listUCs = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AllUCs>>(apiResponse);
                }
            }
        }
        catch (Exception e)
        {
            AlertService.Clear();
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GetVillages()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/get?pageNumber=1&perPage=10"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    listVillages = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AllVillages>>(apiResponse);
                }
            }
        }
        catch (Exception e)
        {
            AlertService.Clear();
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GetUCsData()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "reports/village"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    filteredReports = Newtonsoft.Json.JsonConvert.DeserializeObject<VillageFilteredReports>(apiResponse);
                }
            }
        }
        catch (Exception e)
        {
            AlertService.Clear();
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async void OnValidSubmit()
    {
        loading = true;
        loading = false;
    }

    private async Task ClearSearch()
    {
        selectedTaluka = "Select Taluka ...";
        selectedUc = "Select Union Council ...";
        selectedVillage = "Select Village ...";
        selectedTalukaId = 0;

        loading = true;
        isOnSearch = false;
        await GetTalukas();
        await GetUCsData();
        loading = false;
        StateHasChanged();
    }

    private async Task Search(string selectedTaluka, string selectedUc, string selectedVillage)
    {
        if (string.IsNullOrEmpty(selectedTaluka) || selectedTaluka == "Select Taluka ...") return;

        selectedTalukaId = Int16.Parse(selectedTaluka);
        loading = true;
        isOnSearch = true;
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + $"reports/village?talukaId={selectedTalukaId}"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    filteredReports = Newtonsoft.Json.JsonConvert.DeserializeObject<VillageFilteredReports>(apiResponse);
                }
            }
        }
        catch (Exception e)
        {
            selectedTalukaId = 0;
            AlertService.Clear();
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
        finally
        {
            AlertService.Clear();
            loading = false;
            StateHasChanged();
        }
    }

    public async void DownloadCsv()
    {
        string url = string.Empty;
        if (selectedTalukaId != 0)
        {
            url = $"https://entrynowapi.azurewebsites.net/api/reports/village/download?talukaId={selectedTalukaId}";
        }
        else
        {
            url = "https://entrynowapi.azurewebsites.net/api/reports/village/download";
        }
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}   